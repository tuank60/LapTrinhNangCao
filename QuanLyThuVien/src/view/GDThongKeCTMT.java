package view;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import static com.itextpdf.text.Font.ITALIC;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import model.MyConnect;
import static view.MainFrame.setJTableColumnsWidth;

public class GDThongKeCTMT extends javax.swing.JFrame {

    private MyConnect myConn;
    private PreparedStatement ps;
    private ResultSet rs;
    private DefaultTableModel model1;

    /**
     * Creates new form GDThongKeCTMT
     */
    public GDThongKeCTMT() {
        initComponents();
        this.setTitle("Thư viện Trường Đại học Bách Khoa Hà Nội");
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        myConn = new MyConnect();
        model1 = (DefaultTableModel) jTable1.getModel();
        model1.setRowCount(0);
        // Thêm hàng đầu tiên vào bảng, đếm số độc giả có trong bảng độc giả
        try {
            String sql = "SELECT COUNT(*) FROM quanlythuvien.docgia";
            int numberOfRecords = 0;
            ps = myConn.getConnection().prepareStatement(sql);
            rs = ps.executeQuery();
            if (rs.next()) {
                numberOfRecords = rs.getInt(1);
            }
            Vector s = new Vector();
            s.add("Tổng số độc giả");
            s.add(numberOfRecords);
            model1.addRow(s);
        } catch (Exception e) {
            e.printStackTrace();
        }

        // Thêm hàng thứ 2, đếm số độc giả đã và  đang mượn sách
        try {
            String sql = "SELECT COUNT(*) FROM quanlythuvien.dg_ttmt_view";
            int numberOfRecords = 0;
            ps = myConn.getConnection().prepareStatement(sql);
            rs = ps.executeQuery();
            if (rs.next()) {
                numberOfRecords = rs.getInt(1);
            }
            Vector s = new Vector();
            s.add("Tổng số độc giả mượn sách");
            s.add(numberOfRecords);
            model1.addRow(s);
        } catch (Exception e) {
            e.printStackTrace();
        }

        // Thêm hàng thứ 3, đếm số sách trong bảng sách
        try {
            String sql = "SELECT COUNT(*) FROM quanlythuvien.sach";
            int numberOfRecords = 0;
            ps = myConn.getConnection().prepareStatement(sql);
            rs = ps.executeQuery();
            if (rs.next()) {
                numberOfRecords = rs.getInt(1);
            }
            Vector s = new Vector();
            s.add("Tổng số sách quản lý");
            s.add(numberOfRecords);
            model1.addRow(s);
        } catch (Exception e) {
            e.printStackTrace();
        }
        // Thêm hàng thứ 4, đếm số sách đang cho mượn
        try {
            String sql = "SELECT COUNT(*) FROM quanlythuvien.ctmuontra WHERE tinhtrang = 'Chưa trả'";
            int numberOfRecords = 0;
            ps = myConn.getConnection().prepareStatement(sql);
            rs = ps.executeQuery();
            if (rs.next()) {
                numberOfRecords = rs.getInt(1);
            }
            Vector s = new Vector();
            s.add("Tổng số sách đang cho mượn");
            s.add(numberOfRecords);
            model1.addRow(s);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Thống kê chi tiết mượn trả");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Tổng số độc giả", null},
                {"Tổng số độc giả mượn sách", null},
                {"Tổng số sách trong thư viện", null},
                {"Tổng số sách đang mượn", null}
            },
            new String [] {
                "Tiêu chí", "Số lượng"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton2.setText("Xuất File");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton3.setText("Trở lại");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            this.dispose();
            MainFrame mf = new MainFrame();
            mf.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(GDThemSach.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        DefaultTableModel model1 = (DefaultTableModel) jTable1.getModel();
        if (model1.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Chưa có dữ liệu để xuất file !");
        } else {
            JFileChooser chooser = new JFileChooser();
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            chooser.setAcceptAllFileFilterUsed(false);
            FileNameExtensionFilter ft = new FileNameExtensionFilter("PDF Documents", "pdf");
            chooser.addChoosableFileFilter(ft);
            int returnVal = chooser.showSaveDialog(this);
            if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
                try {
                    String fileName = chooser.getSelectedFile().getName();
                    String dir = chooser.getCurrentDirectory().toString();
                    File f = new File(dir + "\\" + fileName + ".pdf");

                    if (f.exists()) {
                        JOptionPane.showMessageDialog(this, "Tên file đã tồn tại, mời bạn chọn tên khác !");
                    } else {
                        Document document = new Document(PageSize.A4, 50, 50, 10, 50);
                        PdfWriter writer;
                        writer = PdfWriter.getInstance(document, new FileOutputStream(dir + "\\" + fileName + ".pdf"));
                        document.open();

                        Font f1 = new Font(BaseFont.createFont("/assets/vuArial.ttf", BaseFont.IDENTITY_H, BaseFont.EMBEDDED));
                        f1.setSize(10);
                        f1.setColor(BaseColor.BLACK);
                        document.add(new Paragraph("THƯ VIỆN BÁCH KHOA\n         IN ẤN SAO KÊ", f1));

                        Font f2 = new Font(BaseFont.createFont("/assets/vuArial.ttf", BaseFont.IDENTITY_H, BaseFont.EMBEDDED));
                        f2.setSize(16);
                        f2.setColor(BaseColor.BLACK);
                        Paragraph p = new Paragraph("THỐNG KÊ THÔNG CHI TIẾT MƯỢN TRẢ", f2);
                        p.setAlignment(Element.ALIGN_CENTER);
                        document.add(p);

                        Font f5 = new Font(BaseFont.createFont("/assets/vuArial.ttf", BaseFont.IDENTITY_H, BaseFont.EMBEDDED));
                        f5.setSize(8);
                        f5.setColor(BaseColor.BLACK);
                        f5.setStyle(ITALIC);
                        Paragraph p5 = new Paragraph("\n\n", f5);
                        document.add(p5);

                        Font f3 = new Font(BaseFont.createFont("/assets/vuArial.ttf", BaseFont.IDENTITY_H, BaseFont.EMBEDDED));
                        f3.setSize(8);
                        f3.setColor(BaseColor.BLACK);

                        Font f6 = new Font(BaseFont.createFont("/assets/vuArial.ttf", BaseFont.IDENTITY_H, BaseFont.EMBEDDED));
                        f6.setSize(8);
                        f6.setColor(BaseColor.BLACK);
                        f6.setStyle(ITALIC);

                        Font f7 = new Font(BaseFont.createFont("/assets/vuArial.ttf", BaseFont.IDENTITY_H, BaseFont.EMBEDDED));
                        f7.setSize(8);
                        f7.setColor(BaseColor.BLACK);
                        PdfPTable t1 = new PdfPTable(new float[]{1, 1});
                        t1.setWidthPercentage(100);
                        t1.setTotalWidth(1200);
                        t1.setSpacingBefore(0);
                        t1.setSpacingAfter(0);
                        PdfPCell c11 = new PdfPCell(new Phrase("Tiêu chí", f7));
                        t1.addCell(c11);
                        PdfPCell c12 = new PdfPCell(new Phrase("Số lượng", f7));
                        t1.addCell(c12);
                        for (int i = 0; i < model1.getRowCount(); i++) {
                            t1.addCell(new Phrase(model1.getValueAt(i, 0).toString(), f3));
                            t1.addCell(new Phrase(model1.getValueAt(i, 1).toString(), f3));
                        }
                        document.add(t1);

                        Calendar cal = new GregorianCalendar();
                        int year = cal.get(Calendar.YEAR);
                        int month = cal.get(Calendar.MONTH);
                        int day = cal.get(Calendar.DAY_OF_MONTH);
                        String date = (day + "/" + (month + 1) + "/" + year);
                        Font f4 = new Font(BaseFont.createFont("/assets/vuArial.ttf", BaseFont.IDENTITY_H, BaseFont.EMBEDDED));
                        f4.setSize(10);
                        f4.setColor(BaseColor.BLACK);
                        Paragraph p1 = new Paragraph("\nHà Nội , " + date, f4);
                        p1.setAlignment(Element.ALIGN_RIGHT);
                        document.add(p1);

                        document.close();
                        JOptionPane.showMessageDialog(this, "Lưu file thành công !");
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Hủy bỏ !");
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GDThongKeCTMT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GDThongKeCTMT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GDThongKeCTMT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GDThongKeCTMT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GDThongKeCTMT().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
